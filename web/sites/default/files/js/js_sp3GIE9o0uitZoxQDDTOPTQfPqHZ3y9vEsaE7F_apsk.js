/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function (Drupal) {
  Drupal.theme.checkbox = function () {
    return "<input type=\"checkbox\" class=\"form-checkbox\"/>";
  };
})(Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function (Drupal) {
  Drupal.theme.checkbox = function () {
    return '<input type="checkbox" class="form-checkbox form-boolean form-boolean--type-checkbox"/>';
  };
})(Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
  Drupal.behaviors.ClickToSelect = {
    attach: function attach(context) {
      $('.js-click-to-select-trigger', context).once('media-library-click-to-select').on('click', function (event) {
        event.preventDefault();
        var $input = $(event.currentTarget).closest('.js-click-to-select').find('.js-click-to-select-checkbox input');
        $input.prop('checked', !$input.prop('checked')).trigger('change');
      });
      $('.js-click-to-select-checkbox input', context).once('media-library-click-to-select').on('change', function (_ref) {
        var currentTarget = _ref.currentTarget;
        $(currentTarget).closest('.js-click-to-select').toggleClass('checked', $(currentTarget).prop('checked'));
      }).on('focus blur', function (_ref2) {
        var currentTarget = _ref2.currentTarget,
            type = _ref2.type;
        $(currentTarget).closest('.js-click-to-select').toggleClass('is-focus', type === 'focus');
      });
      $('.js-click-to-select-trigger, .js-click-to-select-checkbox', context).once('media-library-click-to-select-hover').on('mouseover mouseout', function (_ref3) {
        var currentTarget = _ref3.currentTarget,
            type = _ref3.type;
        $(currentTarget).closest('.js-click-to-select').toggleClass('is-hover', type === 'mouseover');
      });
    }
  };
})(jQuery, Drupal);;
(function ($, Drupal) {
  Drupal.behaviors.MediaLibrarySelectAll = {
    attach: function attach(context) {
      var $view = $('.js-media-library-view[data-view-display-id="page"]', context).once('media-library-select-all');
      if ($view.length && $view.find('.js-media-library-item').length) {
        var $checkbox = $(Drupal.theme('checkbox')).on('click', function (_ref) {
          var currentTarget = _ref.currentTarget;

          var $checkboxes = $(currentTarget).closest('.js-media-library-view').find('.js-media-library-item input[type="checkbox"]');
          $checkboxes.prop('checked', $(currentTarget).prop('checked')).trigger('change');

          var announcement = $(currentTarget).prop('checked') ? Drupal.t('All @count items selected', {
            '@count': $checkboxes.length
          }) : Drupal.t('Zero items selected');
          Drupal.announce(announcement);
        });
        var $label = $('<label class="media-library-select-all"></label>').text(Drupal.t('Select all media'));
        $label.prepend($checkbox);
        $view.find('.js-media-library-item').first().before($label);
      }

      // Media Library select
      $('.media-library-view .form-checkbox', context).on('click', function() {
        var $bulkOperations = $(this).parents('.media-library-view').find('[data-drupal-selector*="edit-header"]');

        if ($('.media-library-view .form-checkbox:checked', context).length > 0) {
          $bulkOperations.addClass('is-sticky');
        } else {
          $bulkOperations.removeClass('is-sticky');
        }
      });

      // Media Library select
      $('.media-library-view .media-library-item__click-to-select-trigger', context).on('click', function() {
        var $bulkOperations = $(this).parents('.media-library-view').find('[data-drupal-selector*="edit-header"]');

        if ($('.media-library-view .form-checkbox:checked', context).length > 0) {
          $bulkOperations.addClass('is-sticky');
        } else {
          $bulkOperations.removeClass('is-sticky');
        }

        var selectAll = $('.media-library-select-all input');
        var checkboxes = $('.media-library-view .media-library-item input');

        if (selectAll.filter(':checked').length === 1 && checkboxes.length !== checkboxes.filter(':checked').length) {
          selectAll.prop('checked', false).trigger('change');
        }
      });
    }
  };
})(jQuery, Drupal);
;
(($, Drupal) => {
  Drupal.behaviors.tableSelect = {
    attach: function attach(context) {
      $(context)
        .find('th.select-all')
        .closest('table')
        .once('table-select')
        .each(Drupal.tableSelect);
    }
  };

  Drupal.tableSelect = function () {
    if ($(this).find('td input[type="checkbox"]').length === 0) {
      return;
    }

    var table = this;
    var checkboxes = 0;
    var lastChecked = 0;
    var $table = $(table);
    var strings = {
      selectAll: Drupal.t('Select all rows in this table'),
      selectNone: Drupal.t('Deselect all rows in this table')
    };
    var setClass = 'is-sticky';
    var $stickyHeader = $table
      .parents('form')
      .find('[data-drupal-selector*="edit-header"]');

    var updateSelectAll = function updateSelectAll(state) {
      $table
        .prev('table.sticky-header')
        .addBack()
        .find('th.select-all input[type="checkbox"]')
        .each(function () {
          var $checkbox = $(this);
          var stateChanged = $checkbox.prop('checked') !== state;

          $checkbox.attr('title', state ? strings.selectNone : strings.selectAll);

          if (stateChanged) {
            $checkbox.prop('checked', state).trigger('change');
          }
        });
    };
    var updateSticky = function updateSticky(state) {
      if (state === true) {
        $stickyHeader.addClass(setClass);
      }
      else {
        $stickyHeader.removeClass(setClass);
      }
    };

    $table
      .find('th.select-all')
      .prepend($(Drupal.theme('checkbox')).attr('title', strings.selectAll))
      .on('click', (event) => {
        if ($(event.target).is('input[type="checkbox"]')) {
          checkboxes.each(function () {
            var $checkbox = $(this);
            var stateChanged = $checkbox.prop('checked') !== event.target.checked;

            if (stateChanged) {
              $checkbox.prop('checked', event.target.checked).trigger('change');
            }

            $checkbox.closest('tr').toggleClass('selected', this.checked);
          });

          updateSelectAll(event.target.checked);
          updateSticky(event.target.checked);
        }
      });

    checkboxes = $table
      .find('td input[type="checkbox"]:enabled')
      .on('click', function (e) {
        $(this)
          .closest('tr')
          .toggleClass('selected', this.checked);

        if (e.shiftKey && lastChecked && lastChecked !== e.target) {
          Drupal.tableSelectRange($(e.target).closest('tr')[0], $(lastChecked).closest('tr')[0], e.target.checked);
        }

        updateSelectAll(checkboxes.length === checkboxes.filter(':checked').length);
        updateSticky(Boolean(Number(checkboxes.filter(':checked').length)));

        lastChecked = e.target;
      });

    updateSelectAll(checkboxes.length === checkboxes.filter(':checked').length);
    updateSticky(Boolean(Number(checkboxes.filter(':checked').length)));
  };

  Drupal.tableSelectRange = function (from, to, state) {
    var mode = from.rowIndex > to.rowIndex ? 'previousSibling' : 'nextSibling';

    for (var i = from[mode]; i; i = i[mode]) {
      var $i = $(i);

      if (i.nodeType !== 1) {
        continue;
      }

      $i.toggleClass('selected', state);
      $i.find('input[type="checkbox"]').prop('checked', state);

      if (to.nodeType) {
        if (i === to) {
          break;
        }
      }
      else if ($.filter(to, [i]).r.length) {
        break;
      }
    }
  };

  Drupal.behaviors.ginTableCheckbox = {
    attach: function (context) {
      if ( $("table td .checkbox-toggle", context).length > 0 ) {
        $("table td .checkbox-toggle", context).once().bind('click', function () {
          var checkBoxes = $(this).siblings("input");
          checkBoxes.prop("checked", !checkBoxes.prop("checked"));
        });
      }
    }
  };
})(jQuery, Drupal);
;
